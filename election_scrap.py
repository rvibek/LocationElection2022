# -*- coding: utf-8 -*-
"""LocalElection_DataExtract

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hIyBQrOKLrcsraRlniUvML_lNzaFIoYD
"""
import multiprocessing.dummy as mp


import pandas as pd
import time

# Dictionary of states to map district
# districts DataFrame has a foreign key parentId which is mapped with the states dictionary

states = {
    1: "प्रदेश १",
    2: "मधेश प्रदेश",
    3: "बागमती प्रदेश",
    4: "गण्डकी प्रदेश",
    5: "लुम्बिनी प्रदेश",
    6: "कर्णाली प्रदेश",
    7: "सुदूरपश्चिम प्रदेश",
}

# Load the districts table/dataframe and there are two rows with NULL value which is cleaned
districts = pd.read_json(
    "https://raw.githubusercontent.com/rvibek/LocationElection2022/master/assets/districts.json"
)
districts.dropna(inplace=True)

# Join the districts table with column name states by fetching from states table
districts["states"] = districts.parentId.map(states)


# localbodies consists of all the electorals with 'id' which will be used later in the loop to fetch the data
localbodies = pd.read_json(
    "https://raw.githubusercontent.com/rvibek/LocationElection2022/master/assets/localbodies.json"
)


# this steps builds a flatfile with districtname, districtid, statename to extend the electoralref table
electoralref = pd.merge(
    localbodies, districts, how="outer", left_on="parentId", right_on="id"
)
electoralref.columns = [
    "id",
    "GaPa_NaPa",
    "districtId",
    "districtIdy",
    "district",
    "stateId",
    "state",
]

# this step loop through the entire 753 electorals and fetches data for all the wards within it
# 2 sec sleep is forced between each iteration
# electroal slicer for testing

recs = electoralref.id[:]


def fetchdata(id):
    url = (
        "https://result.election.gov.np/JSONFiles/Election2079/Local/"
        + str(id)
        + ".json"
    )
    df = pd.read_json(url)
    df["id"] = id
    df = pd.merge(
        df,
        electoralref[electoralref.id == id],
        how="outer",
        left_on="id",
        right_on="id",
    )
    filename = "raw/" + str(id) + ".csv"
    df.to_csv(filename)
    print(filename)
    time.sleep(2)


if __name__ == "__main__":
    p = mp.Pool(5)
    p.map(fetchdata, recs)  # range(0,1000) if you want to replicate your example
    p.close()
    p.join()

# for id in recs:
#   url = 'https://result.election.gov.np//JSONFiles/Election2079/Local/'+str(id)+'.json'
#   df = pd.read_json(url)
#   df['id'] = id
#   df = pd.merge(df, electoralref[electoralref.id == id], how='outer', left_on='id', right_on='id')
#   filename = 'raw/'+str(id)+'.csv'
#   df.to_csv(filename)
#   time.sleep(2)

# # merge all the results into one

files = ["raw/" + str(id) + ".csv" for id in recs]
pd.concat([pd.read_csv(file) for file in files]).drop(
    columns="Unnamed: 0"
).reset_index().drop(columns="index").to_csv("EC_merged.csv", index=False)
